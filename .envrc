export PY_VERS=3.12.8
export SUPPORTED_PY_VERS="python3.12 python3.11 python 3.10 python3.9 python3.13"

print_err(){
    printf "+++ ERROR +++ %s\n" "$*" >&2;
}

print_warn(){
    printf "+++ WARNING +++ %s\n" "$*" >&2;
}

get_candidate_py_vers(){
    PY_VERS_NO_PATCH=$(cut -d. -f1-2 <<< "${PY_VERS}")
    for py in python${PY_VERS_NO_PATCH} python3 python; do
        if command -v ${py} >/dev/null 2>&1 ; then
            # Check if it matches desired
            py_vers=$(awk '{print $2}' <<< "$(${py} -V)")
            if [[ "${py_vers}" == "${PY_VERS}" ]]; then
                # found exact match
                echo "$py"
                return
            fi
        fi
    done

    print_warn "Did not find exact match for desired ${PY_VERS}, falling back to major.minor compat"

    # python, python3, pythonX.YY either not installed or don't match exact PY_VERS,
    # fallback to trying to match just major.minor
    for py in $(echo $SUPPORTED_PY_VERS) python3 python; do
        py_vers=""
        py_vers_patchless=""
        if command -v ${py} >/dev/null 2>&1 ; then
            py_vers=$(awk '{print $2}' <<< "$(${py} -V)")
            py_vers_patchless=$(cut -d. -f1-2 <<< "${py_vers}")

            if [[ "${SUPPORTED_PY_VERS}" == *"python${py_vers_patchless}"* ]]; then
                # found supported major.minor, exit early
                # n.b. - prioritizes order versioning left to right in SUPPORTED_PY_VERS
                echo "$py"
                return
            fi
        fi
    done

    print_err "Did not detect python or python3 installed! Please install one of Python's '${SUPPORTED_PY_VERS}' (ideally $PY_VERS) and try again!"
    exit 1
}

if [[ "$(which pyenv)" == "" ]]; then
    layout python "$(get_candidate_py_vers)"
else
    layout pyenv "${PY_VERS}"
fi
